"use strict";
var ckan;
(function (ckan) {
    let CKANEXT_FILES;
    (function (CKANEXT_FILES) {
        let adapters;
        (function (adapters) {
            class GCSMultipart extends adapters.Multipart {
                async _uploadChunk(info, part, start) {
                    if (!part.size) {
                        throw new Error("0-length chunks are not allowed");
                    }
                    const request = new XMLHttpRequest();
                    request.open("PUT", info.storage_data.session_url);
                    request.setRequestHeader("content-range", `bytes ${start}-${start + part.size - 1}/${info.storage_data.size}`);
                    request.send(part);
                    const resp = await new Promise((done, fail) => {
                        request.addEventListener("load", (event) => done(request));
                    });
                    let uploaded;
                    if ([200, 201].includes(resp.status)) {
                        uploaded = info.storage_data.size;
                    }
                    else if (resp.status === 308) {
                        const range = resp.getResponseHeader("range");
                        uploaded = Number(range.split("=")[1].split("-")[1]) + 1;
                    }
                    else {
                        throw new Error(await resp.responseText);
                    }
                    if (!Number.isInteger(uploaded)) {
                        throw new Error(`Invalid uploaded size ${uploaded}`);
                    }
                    return new Promise((done, fail) => {
                        this.sandbox.client.call("POST", "files_upload_update", {
                            id: info.id,
                            uploaded,
                        }, (data) => {
                            done(data.result);
                        }, (resp) => {
                            fail(typeof resp.responseJSON === "string"
                                ? resp.responseText
                                : resp.responseJSON.error);
                        });
                    });
                }
            }
            adapters.GCSMultipart = GCSMultipart;
        })(adapters = CKANEXT_FILES.adapters || (CKANEXT_FILES.adapters = {}));
    })(CKANEXT_FILES = ckan.CKANEXT_FILES || (ckan.CKANEXT_FILES = {}));
})(ckan || (ckan = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMtLWdvb2dsZS1jbG91ZC1zdG9yYWdlLXVwbG9hZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vdHMvZmlsZXMtLWdvb2dsZS1jbG91ZC1zdG9yYWdlLXVwbG9hZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFVLElBQUksQ0FvRWI7QUFwRUQsV0FBVSxJQUFJO0lBQ1osSUFBaUIsYUFBYSxDQWtFN0I7SUFsRUQsV0FBaUIsYUFBYTtRQUM1QixJQUFpQixRQUFRLENBZ0V4QjtRQWhFRCxXQUFpQixRQUFRO1lBS3ZCLE1BQWEsWUFBYSxTQUFRLFNBQUEsU0FBUztnQkFDekMsS0FBSyxDQUFDLFlBQVksQ0FDaEIsSUFBbUIsRUFDbkIsSUFBVSxFQUNWLEtBQWE7b0JBRWIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQzt3QkFDZixNQUFNLElBQUksS0FBSyxDQUFDLGlDQUFpQyxDQUFDLENBQUM7b0JBQ3JELENBQUM7b0JBRUQsTUFBTSxPQUFPLEdBQUcsSUFBSSxjQUFjLEVBQUUsQ0FBQztvQkFFckMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQztvQkFDbkQsT0FBTyxDQUFDLGdCQUFnQixDQUN0QixlQUFlLEVBQ2YsU0FBUyxLQUFLLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQ3BFLENBQUM7b0JBQ0YsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFFbkIsTUFBTSxJQUFJLEdBQVEsTUFBTSxJQUFJLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRTt3QkFDakQsT0FBTyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7b0JBQzdELENBQUMsQ0FBQyxDQUFDO29CQUNILElBQUksUUFBUSxDQUFDO29CQUViLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO3dCQUNyQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7b0JBQ3BDLENBQUM7eUJBQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDO3dCQUMvQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7d0JBQzlDLFFBQVEsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQzNELENBQUM7eUJBQU0sQ0FBQzt3QkFDTixNQUFNLElBQUksS0FBSyxDQUFDLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO29CQUMzQyxDQUFDO29CQUVELElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7d0JBQ2hDLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLFFBQVEsRUFBRSxDQUFDLENBQUM7b0JBQ3ZELENBQUM7b0JBRUQsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRTt3QkFDaEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUN0QixNQUFNLEVBQ04scUJBQXFCLEVBQ3JCOzRCQUNFLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRTs0QkFDWCxRQUFRO3lCQUNULEVBQ0QsQ0FBQyxJQUFTLEVBQUUsRUFBRTs0QkFDWixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO3dCQUNwQixDQUFDLEVBQ0QsQ0FBQyxJQUFTLEVBQUUsRUFBRTs0QkFDWixJQUFJLENBQ0YsT0FBTyxJQUFJLENBQUMsWUFBWSxLQUFLLFFBQVE7Z0NBQ25DLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWTtnQ0FDbkIsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUM1QixDQUFDO3dCQUNKLENBQUMsQ0FDRixDQUFDO29CQUNKLENBQUMsQ0FBQyxDQUFDO2dCQUNMLENBQUM7YUFDRjtZQTFEWSxxQkFBWSxlQTBEeEIsQ0FBQTtRQUNILENBQUMsRUFoRWdCLFFBQVEsR0FBUixzQkFBUSxLQUFSLHNCQUFRLFFBZ0V4QjtJQUNILENBQUMsRUFsRWdCLGFBQWEsR0FBYixrQkFBYSxLQUFiLGtCQUFhLFFBa0U3QjtBQUNILENBQUMsRUFwRVMsSUFBSSxLQUFKLElBQUksUUFvRWIiLCJzb3VyY2VzQ29udGVudCI6WyJuYW1lc3BhY2UgY2thbiB7XG4gIGV4cG9ydCBuYW1lc3BhY2UgQ0tBTkVYVF9GSUxFUyB7XG4gICAgZXhwb3J0IG5hbWVzcGFjZSBhZGFwdGVycyB7XG4gICAgICBleHBvcnQgdHlwZSBHQ1NVcGxvYWRJbmZvID0gVXBsb2FkSW5mbyAmIHtcbiAgICAgICAgc3RvcmFnZV9kYXRhOiBTdG9yYWdlRGF0YSAmIHsgc2Vzc2lvbl91cmw6IHN0cmluZyB9O1xuICAgICAgfTtcblxuICAgICAgZXhwb3J0IGNsYXNzIEdDU011bHRpcGFydCBleHRlbmRzIE11bHRpcGFydCB7XG4gICAgICAgIGFzeW5jIF91cGxvYWRDaHVuayhcbiAgICAgICAgICBpbmZvOiBHQ1NVcGxvYWRJbmZvLFxuICAgICAgICAgIHBhcnQ6IEJsb2IsXG4gICAgICAgICAgc3RhcnQ6IG51bWJlcixcbiAgICAgICAgKTogUHJvbWlzZTxVcGxvYWRJbmZvPiB7XG4gICAgICAgICAgaWYgKCFwYXJ0LnNpemUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIjAtbGVuZ3RoIGNodW5rcyBhcmUgbm90IGFsbG93ZWRcIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgICAgICAgcmVxdWVzdC5vcGVuKFwiUFVUXCIsIGluZm8uc3RvcmFnZV9kYXRhLnNlc3Npb25fdXJsKTtcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoXG4gICAgICAgICAgICBcImNvbnRlbnQtcmFuZ2VcIixcbiAgICAgICAgICAgIGBieXRlcyAke3N0YXJ0fS0ke3N0YXJ0ICsgcGFydC5zaXplIC0gMX0vJHtpbmZvLnN0b3JhZ2VfZGF0YS5zaXplfWAsXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXF1ZXN0LnNlbmQocGFydCk7XG5cbiAgICAgICAgICBjb25zdCByZXNwOiBhbnkgPSBhd2FpdCBuZXcgUHJvbWlzZSgoZG9uZSwgZmFpbCkgPT4ge1xuICAgICAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCAoZXZlbnQpID0+IGRvbmUocmVxdWVzdCkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGxldCB1cGxvYWRlZDtcblxuICAgICAgICAgIGlmIChbMjAwLCAyMDFdLmluY2x1ZGVzKHJlc3Auc3RhdHVzKSkge1xuICAgICAgICAgICAgdXBsb2FkZWQgPSBpbmZvLnN0b3JhZ2VfZGF0YS5zaXplO1xuICAgICAgICAgIH0gZWxzZSBpZiAocmVzcC5zdGF0dXMgPT09IDMwOCkge1xuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSByZXNwLmdldFJlc3BvbnNlSGVhZGVyKFwicmFuZ2VcIik7XG4gICAgICAgICAgICB1cGxvYWRlZCA9IE51bWJlcihyYW5nZS5zcGxpdChcIj1cIilbMV0uc3BsaXQoXCItXCIpWzFdKSArIDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihhd2FpdCByZXNwLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKHVwbG9hZGVkKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHVwbG9hZGVkIHNpemUgJHt1cGxvYWRlZH1gKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKGRvbmUsIGZhaWwpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2FuZGJveC5jbGllbnQuY2FsbChcbiAgICAgICAgICAgICAgXCJQT1NUXCIsXG4gICAgICAgICAgICAgIFwiZmlsZXNfdXBsb2FkX3VwZGF0ZVwiLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWQ6IGluZm8uaWQsXG4gICAgICAgICAgICAgICAgdXBsb2FkZWQsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIChkYXRhOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICBkb25lKGRhdGEucmVzdWx0KTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgKHJlc3A6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIGZhaWwoXG4gICAgICAgICAgICAgICAgICB0eXBlb2YgcmVzcC5yZXNwb25zZUpTT04gPT09IFwic3RyaW5nXCJcbiAgICAgICAgICAgICAgICAgICAgPyByZXNwLnJlc3BvbnNlVGV4dFxuICAgICAgICAgICAgICAgICAgICA6IHJlc3AucmVzcG9uc2VKU09OLmVycm9yLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=