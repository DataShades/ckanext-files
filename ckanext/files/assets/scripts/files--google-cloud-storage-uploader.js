var ckan;
(function (ckan) {
    let CKANEXT_FILES;
    (function (CKANEXT_FILES) {
        let adapters;
        (function (adapters) {
            class GCSMultipart extends adapters.Multipart {
                async _uploadChunk(info, part, start) {
                    if (!part.size) {
                        throw new Error("0-length chunks are not allowed");
                    }
                    const request = new XMLHttpRequest();
                    request.open("PUT", info.storage_data.session_url);
                    request.setRequestHeader("content-range", `bytes ${start}-${start + part.size - 1}/${info.storage_data.size}`);
                    request.send(part);
                    const resp = await new Promise((done, fail) => {
                        request.addEventListener("load", (event) => done(request));
                    });
                    let uploaded;
                    if ([200, 201].includes(resp.status)) {
                        uploaded = info.storage_data.size;
                    }
                    else if (resp.status === 308) {
                        const range = resp.getResponseHeader("range");
                        uploaded = Number(range.split("=")[1].split("-")[1]) + 1;
                    }
                    else {
                        throw new Error(await resp.responseText);
                    }
                    if (!Number.isInteger(uploaded)) {
                        throw new Error(`Invalid uploaded size ${uploaded}`);
                    }
                    return new Promise((done, fail) => {
                        this.sandbox.client.call("POST", "files_upload_update", {
                            id: info.id,
                            uploaded,
                        }, (data) => {
                            done(data.result);
                        }, (resp) => {
                            fail(typeof resp.responseJSON === "string"
                                ? resp.responseText
                                : resp.responseJSON.error);
                        });
                    });
                }
            }
            adapters.GCSMultipart = GCSMultipart;
        })(adapters = CKANEXT_FILES.adapters || (CKANEXT_FILES.adapters = {}));
    })(CKANEXT_FILES = ckan.CKANEXT_FILES || (ckan.CKANEXT_FILES = {}));
})(ckan || (ckan = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMtLWdvb2dsZS1jbG91ZC1zdG9yYWdlLXVwbG9hZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vdHMvZmlsZXMtLWdvb2dsZS1jbG91ZC1zdG9yYWdlLXVwbG9hZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQVUsSUFBSSxDQW9FYjtBQXBFRCxXQUFVLElBQUk7SUFDWixJQUFpQixhQUFhLENBa0U3QjtJQWxFRCxXQUFpQixhQUFhO1FBQzVCLElBQWlCLFFBQVEsQ0FnRXhCO1FBaEVELFdBQWlCLFFBQVE7WUFLdkIsTUFBYSxZQUFhLFNBQVEsU0FBQSxTQUFTO2dCQUN6QyxLQUFLLENBQUMsWUFBWSxDQUNoQixJQUFtQixFQUNuQixJQUFVLEVBQ1YsS0FBYTtvQkFFYixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO3dCQUNmLE1BQU0sSUFBSSxLQUFLLENBQUMsaUNBQWlDLENBQUMsQ0FBQztvQkFDckQsQ0FBQztvQkFFRCxNQUFNLE9BQU8sR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDO29CQUVyQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDO29CQUNuRCxPQUFPLENBQUMsZ0JBQWdCLENBQ3RCLGVBQWUsRUFDZixTQUFTLEtBQUssSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FDcEUsQ0FBQztvQkFDRixPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUVuQixNQUFNLElBQUksR0FBUSxNQUFNLElBQUksT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO3dCQUNqRCxPQUFPLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztvQkFDN0QsQ0FBQyxDQUFDLENBQUM7b0JBQ0gsSUFBSSxRQUFRLENBQUM7b0JBRWIsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7d0JBQ3JDLFFBQVEsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztvQkFDcEMsQ0FBQzt5QkFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7d0JBQy9CLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQzt3QkFDOUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDM0QsQ0FBQzt5QkFBTSxDQUFDO3dCQUNOLE1BQU0sSUFBSSxLQUFLLENBQUMsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7b0JBQzNDLENBQUM7b0JBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQzt3QkFDaEMsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsUUFBUSxFQUFFLENBQUMsQ0FBQztvQkFDdkQsQ0FBQztvQkFFRCxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO3dCQUNoQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3RCLE1BQU0sRUFDTixxQkFBcUIsRUFDckI7NEJBQ0UsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFOzRCQUNYLFFBQVE7eUJBQ1QsRUFDRCxDQUFDLElBQVMsRUFBRSxFQUFFOzRCQUNaLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7d0JBQ3BCLENBQUMsRUFDRCxDQUFDLElBQVMsRUFBRSxFQUFFOzRCQUNaLElBQUksQ0FDRixPQUFPLElBQUksQ0FBQyxZQUFZLEtBQUssUUFBUTtnQ0FDbkMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZO2dDQUNuQixDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQzVCLENBQUM7d0JBQ0osQ0FBQyxDQUNGLENBQUM7b0JBQ0osQ0FBQyxDQUFDLENBQUM7Z0JBQ0wsQ0FBQzthQUNGO1lBMURZLHFCQUFZLGVBMER4QixDQUFBO1FBQ0gsQ0FBQyxFQWhFZ0IsUUFBUSxHQUFSLHNCQUFRLEtBQVIsc0JBQVEsUUFnRXhCO0lBQ0gsQ0FBQyxFQWxFZ0IsYUFBYSxHQUFiLGtCQUFhLEtBQWIsa0JBQWEsUUFrRTdCO0FBQ0gsQ0FBQyxFQXBFUyxJQUFJLEtBQUosSUFBSSxRQW9FYiIsInNvdXJjZXNDb250ZW50IjpbIm5hbWVzcGFjZSBja2FuIHtcbiAgZXhwb3J0IG5hbWVzcGFjZSBDS0FORVhUX0ZJTEVTIHtcbiAgICBleHBvcnQgbmFtZXNwYWNlIGFkYXB0ZXJzIHtcbiAgICAgIGV4cG9ydCB0eXBlIEdDU1VwbG9hZEluZm8gPSBVcGxvYWRJbmZvICYge1xuICAgICAgICBzdG9yYWdlX2RhdGE6IFN0b3JhZ2VEYXRhICYgeyBzZXNzaW9uX3VybDogc3RyaW5nIH07XG4gICAgICB9O1xuXG4gICAgICBleHBvcnQgY2xhc3MgR0NTTXVsdGlwYXJ0IGV4dGVuZHMgTXVsdGlwYXJ0IHtcbiAgICAgICAgYXN5bmMgX3VwbG9hZENodW5rKFxuICAgICAgICAgIGluZm86IEdDU1VwbG9hZEluZm8sXG4gICAgICAgICAgcGFydDogQmxvYixcbiAgICAgICAgICBzdGFydDogbnVtYmVyLFxuICAgICAgICApOiBQcm9taXNlPFVwbG9hZEluZm8+IHtcbiAgICAgICAgICBpZiAoIXBhcnQuc2l6ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiMC1sZW5ndGggY2h1bmtzIGFyZSBub3QgYWxsb3dlZFwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAgICAgICByZXF1ZXN0Lm9wZW4oXCJQVVRcIiwgaW5mby5zdG9yYWdlX2RhdGEuc2Vzc2lvbl91cmwpO1xuICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihcbiAgICAgICAgICAgIFwiY29udGVudC1yYW5nZVwiLFxuICAgICAgICAgICAgYGJ5dGVzICR7c3RhcnR9LSR7c3RhcnQgKyBwYXJ0LnNpemUgLSAxfS8ke2luZm8uc3RvcmFnZV9kYXRhLnNpemV9YCxcbiAgICAgICAgICApO1xuICAgICAgICAgIHJlcXVlc3Quc2VuZChwYXJ0KTtcblxuICAgICAgICAgIGNvbnN0IHJlc3A6IGFueSA9IGF3YWl0IG5ldyBQcm9taXNlKChkb25lLCBmYWlsKSA9PiB7XG4gICAgICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIChldmVudCkgPT4gZG9uZShyZXF1ZXN0KSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgbGV0IHVwbG9hZGVkO1xuXG4gICAgICAgICAgaWYgKFsyMDAsIDIwMV0uaW5jbHVkZXMocmVzcC5zdGF0dXMpKSB7XG4gICAgICAgICAgICB1cGxvYWRlZCA9IGluZm8uc3RvcmFnZV9kYXRhLnNpemU7XG4gICAgICAgICAgfSBlbHNlIGlmIChyZXNwLnN0YXR1cyA9PT0gMzA4KSB7XG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IHJlc3AuZ2V0UmVzcG9uc2VIZWFkZXIoXCJyYW5nZVwiKTtcbiAgICAgICAgICAgIHVwbG9hZGVkID0gTnVtYmVyKHJhbmdlLnNwbGl0KFwiPVwiKVsxXS5zcGxpdChcIi1cIilbMV0pICsgMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGF3YWl0IHJlc3AucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIodXBsb2FkZWQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdXBsb2FkZWQgc2l6ZSAke3VwbG9hZGVkfWApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoZG9uZSwgZmFpbCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zYW5kYm94LmNsaWVudC5jYWxsKFxuICAgICAgICAgICAgICBcIlBPU1RcIixcbiAgICAgICAgICAgICAgXCJmaWxlc191cGxvYWRfdXBkYXRlXCIsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZDogaW5mby5pZCxcbiAgICAgICAgICAgICAgICB1cGxvYWRlZCxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgKGRhdGE6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIGRvbmUoZGF0YS5yZXN1bHQpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAocmVzcDogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgZmFpbChcbiAgICAgICAgICAgICAgICAgIHR5cGVvZiByZXNwLnJlc3BvbnNlSlNPTiA9PT0gXCJzdHJpbmdcIlxuICAgICAgICAgICAgICAgICAgICA/IHJlc3AucmVzcG9uc2VUZXh0XG4gICAgICAgICAgICAgICAgICAgIDogcmVzcC5yZXNwb25zZUpTT04uZXJyb3IsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ==
