/**
 * Add selected file to upload queue whenever `[data-queue-scheduler]`
 * dispatches `change` event.
 *
 */
ckan.module("files--image-upload", function ($) {
    return {
        options: {
            spinner: null,
            action: null,
            field: null,
        },
        queue: null,
        initialize() {
            for (let param of ["field", "action"]) {
                if (!this.options[param]) {
                    console.error(`files--image-upload cannot be initialized without '${param}' option`);
                    return;
                }
            }
            if (!this.options.action) {
                console.error("files--image-upload cannot be initialized without `action` option");
                return;
            }
            $.proxyAll(this, /_on/);
            this.queue = new Set();
            this.el.on("change", (event) => this.upload(...event.target.files));
            this.spinner = $(this.options.spinner);
            this.field = $(this.options.field);
            this.submits = this.el
                .closest("form")
                .find("input[type=submit],button[type=submit]");
        },
        upload(...files) {
            files.forEach(async (file) => {
                const uploader = this.sandbox.files.makeUploader("Standard");
                try {
                    this.queue.add(file);
                    this.refreshFormState();
                    const options = {
                        uploaderParams: [{ uploadAction: this.options.action }],
                    };
                    const { details: { result }, } = await this.sandbox.files.upload(file, options);
                    this.field.val(result.id);
                }
                catch (err) {
                    if (typeof err === "string") {
                        this.reportError("Error", err);
                    }
                    else {
                        for (let [field, problems] of Object.entries(err)) {
                            if (field.startsWith("__"))
                                continue;
                            this.reportError(field, problems.join(","));
                        }
                    }
                }
                this.queue.delete(file);
                this.refreshFormState();
            });
        },
        reportError(label, message) {
            const box = this.sandbox.notify.initialize(this.sandbox.notify.create(label, message));
            this.field.parent().append(box);
        },
        refreshFormState() {
            this.spinner.prop("hidden", !this.queue.size);
            this.submits.prop("disabled", !!this.queue.size);
        },
    };
});
/**
 * Add selected file to upload queue whenever `[data-queue-scheduler]`
 * dispatches `change` event.
 *
 */
ckan.module("files--scheduler", function ($) {
    return {
        options: {
            immediate: false,
        },
        initialize() {
            const scheduler = this.$("[data-queue-scheduler]");
            scheduler.on("drop", (event) => event.preventDefault());
            scheduler.on("change", (event) => this.push(...event.target.files));
        },
        push(...files) {
            files.forEach((file) => this.sandbox.publish(ckan.CKANEXT_FILES.topics.addFileToQueue, file, { immediate: this.options.immediate }));
        },
    };
});
/**
 * Add file/directories to upload queue via drag'n'drop.
 *
 */
ckan.module("files--dropzone", function ($) {
    return {
        options: {
            immediate: false,
        },
        initialize() {
            $.proxyAll(this, /_on/);
            const element = this.el[0];
            element.addEventListener("dragover", this._onDragOver);
            element.addEventListener("dragenter", this._onDragEnter);
            element.addEventListener("dragleave", this._onDragLeave);
            element.addEventListener("drop", this._onDrop);
        },
        _onDragOver(event) {
            event.preventDefault();
        },
        _onDragEnter(event) { },
        _onDragLeave(event) { },
        _onDrop(event) {
            event.preventDefault();
            if (!event.dataTransfer) {
                return;
            }
            for (let entry of event.dataTransfer.items) {
                this.scanEntry(entry.webkitGetAsEntry(), (file) => this.push(file));
            }
        },
        scanEntry(entry, cb) {
            if (entry.isFile) {
                entry.file(cb);
            }
            else {
                entry
                    .createReader()
                    .readEntries((entries) => entries.forEach((e) => this.scanEntry(e, cb)));
            }
        },
        push(file) {
            this.sandbox.publish(ckan.CKANEXT_FILES.topics.addFileToQueue, file, { immediate: this.options.immediate });
        },
    };
});
/**
 * Add to queue a file, that has associated incomplete upload.
 *
 * Supports a number of properties to verify that the new file matches
 * previously uploaded file.
 *
 *
 */
ckan.module("files--restorer", function ($) {
    return {
        options: {
            name: "",
            size: 0,
            uploaded: 0,
            id: "",
            immediate: false,
        },
        initialize() {
            $.proxyAll(this, /_on/);
            this.el.on("change", this._onChange);
        },
        _onChange(event) {
            const file = event.target.files?.[0];
            if (!file) {
                return;
            }
            if (this.options.name && file.name !== this.options.name) {
                this.sandbox.notify("Name mismatch.", `Expected name: ${this.options.name}`);
                this.sandbox.notify.el[0].scrollIntoView();
                return;
            }
            if (this.options.size && file.size !== this.options.size) {
                this.sandbox.notify("Size mismatch.", `Expected size: ${this.options.size.toLocaleString()} bytes`);
                this.sandbox.notify.el[0].scrollIntoView();
                return;
            }
            this.sandbox.publish(ckan.CKANEXT_FILES.topics.restoreFileInQueue, file, {
                id: this.options.id,
                uploaded: this.options.uploaded,
                immediate: this.options.immediate,
            });
        },
    };
});
ckan.module("files--shared-queue", function ($) {
    return {
        initialize() {
            $.proxyAll(this, /_on/);
            this.worker = new SharedWorker(this.sandbox.url("ckanext-files/scripts/files--shared-uploader.js"));
            this.worker.port.onmessage = console.debug;
        },
    };
});
ckan.module("files--queue", function ($) {
    return {
        options: {
            storage: "default",
            uploader: "Standard",
        },
        initialize() {
            $.proxyAll(this, /_on/);
            ckan.pubsub.subscribe(ckan.CKANEXT_FILES.topics.addFileToQueue, this._onFile);
            ckan.pubsub.subscribe(ckan.CKANEXT_FILES.topics.restoreFileInQueue, this._onFile);
            this.tpl = this.$("[data-upload-template]")
                .remove()
                .removeAttr("data-upload-template hidden");
            this.widgets = new WeakMap();
        },
        teardown() {
            ckan.pubsub.unsubscribe(ckan.CKANEXT_FILES.topics.addFileToQueue, this._onFile);
            ckan.pubsub.unsubscribe(ckan.CKANEXT_FILES.topics.restoreFileInQueue, this._onFile);
        },
        _onFile(file, options = {
            immediate: false,
            id: "",
            uploaded: 0,
            uploaderInstance: null,
            uploader: null,
            storage: null,
        }) {
            const widget = this.tpl.clone(true).appendTo(this.el);
            const info = {
                file,
                id: options.id,
                uploaded: options.uploaded || 0,
                uploader: options.uploaderInstance ||
                    this.sandbox.files.makeUploader(options.uploader || this.options.uploader, { storage: options.storage || this.options.storage }),
            };
            this.widgets.set(widget[0], info);
            widget.on("click", "[data-upload-resume]", this._onWidgetResume);
            widget.on("click", "[data-upload-pause]", this._onWidgetPause);
            info.uploader.addEventListener("commit", (event) => (info.id = event.detail.id));
            info.uploader.addEventListener("fail", ({ detail: { reasons, file }, }) => {
                this.sandbox.notify(file.name, Object.entries(reasons)
                    .filter(([k, v]) => k[0] !== "_")
                    .map(([k, v]) => Array.isArray(v) ? v.join("; ") : v)
                    .join("; "));
                this.sandbox.notify.el[0].scrollIntoView();
                this.toggleAnimation(widget, false);
                widget
                    .find("[data-upload-progress]")
                    .removeClass("bg-primary bg-secondary")
                    .addClass("bg-danger progress-bar-danger");
            });
            info.uploader.addEventListener("error", ({ detail: { message, file }, }) => {
                this.sandbox.notify(file.name, message);
                this.sandbox.notify.el[0].scrollIntoView();
                this.toggleAnimation(widget, false);
                widget
                    .find("[data-upload-progress]")
                    .removeClass("bg-primary bg-secondary")
                    .addClass("bg-danger progress-bar-danger");
            });
            info.uploader.addEventListener("progress", ({ detail: { loaded, total } }) => this.setWidgetCompletion(widget, loaded, total));
            info.uploader.addEventListener("finish", ({ detail: { file, result } }) => {
                this.toggleAnimation(widget, false);
                widget
                    .find("[data-upload-progress]")
                    .removeClass("bg-primary bg-secondary")
                    .addClass("bg-success progress-bar-success");
                this.sandbox.publish(ckan.CKANEXT_FILES.topics.queueItemUploaded, file, result);
            });
            this.setWidgetName(widget, info.file.name);
            this.setWidgetCompletion(widget, info.uploaded, info.file.size);
            if (options.immediate) {
                widget.find("[data-upload-resume]").trigger("click");
            }
        },
        setWidgetName(widget, name) {
            widget.find("[data-item-name]").text(name);
        },
        setWidgetCompletion(widget, uploaded, total) {
            const value = (uploaded * 100) / total;
            const info = this.widgets.get(widget[0]);
            info.uploaded = uploaded;
            const completion = value.toFixed(0) + "%";
            widget
                .find("[data-upload-progress]")
                .text(completion)
                .css("width", completion);
        },
        toggleAnimation(widget, state) {
            widget
                .find("[data-upload-progress]")
                .toggleClass("progress-bar-animated active", state);
        },
        _onWidgetResume(event) {
            const info = this.widgets.get(event.delegateTarget);
            if (info.uploaded >= info.total)
                return;
            const widget = $(event.delegateTarget);
            widget
                .find("[data-upload-progress]")
                .removeClass("bg-secondary")
                .addClass("bg-primary");
            if (info.id) {
                info.uploader.resume(info.file, info.id);
            }
            else {
                info.uploader.upload(info.file);
            }
            this.toggleAnimation(widget, true);
        },
        _onWidgetPause(event) {
            const info = this.widgets.get(event.delegateTarget);
            if (info.uploaded >= info.total)
                return;
            const widget = $(event.delegateTarget);
            widget
                .find("[data-upload-progress]")
                .removeClass("bg-primary")
                .addClass("bg-secondary");
            info.uploader.pause(info.file);
            this.toggleAnimation(widget, false);
        },
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMtLW1vZHVsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi90cy9maWxlcy0tbW9kdWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBQ0gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxVQUFVLENBQUM7SUFRMUMsT0FBTztRQUNILE9BQU8sRUFBRTtZQUNMLE9BQU8sRUFBRSxJQUFJO1lBQ2IsTUFBTSxFQUFFLElBQUk7WUFDWixLQUFLLEVBQUUsSUFBSTtTQUNkO1FBQ0QsS0FBSyxFQUFFLElBQUk7UUFFWCxVQUFVO1lBQ04sS0FBSyxJQUFJLEtBQUssSUFBSSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsRUFBRSxDQUFDO2dCQUNwQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO29CQUN2QixPQUFPLENBQUMsS0FBSyxDQUNULHNEQUFzRCxLQUFLLFVBQVUsQ0FDeEUsQ0FBQztvQkFDRixPQUFPO2dCQUNYLENBQUM7WUFDTCxDQUFDO1lBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7Z0JBQ3ZCLE9BQU8sQ0FBQyxLQUFLLENBQ1QsbUVBQW1FLENBQ3RFLENBQUM7Z0JBQ0YsT0FBTztZQUNYLENBQUM7WUFDRCxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztZQUV4QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7WUFFdkIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBWSxFQUFFLEVBQUUsQ0FDbEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFJLEtBQUssQ0FBQyxNQUEyQixDQUFDLEtBQU0sQ0FBQyxDQUM1RCxDQUFDO1lBQ0YsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLE9B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QUFDLGNBQWMsQ0FBQyxDQUFDO1lBRTlCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMvQixJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN4QyxDQUFDO0tBQ0osQ0FBQztBQUNOLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBZGQgc2VsZWN0ZWQgZmlsZSB0byB1cGxvYWQgcXVldWUgd2hlbmV2ZXIgYFtkYXRhLXF1ZXVlLXNjaGVkdWxlcl1gXG4gKiBkaXNwYXRjaGVzIGBjaGFuZ2VgIGV2ZW50LlxuICpcbiAqL1xuY2thbi5tb2R1bGUoXCJmaWxlcy0taW1hZ2UtdXBsb2FkXCIsIGZ1bmN0aW9uICgkKSB7XG4gICAgdHlwZSBUU3RhcnQgPSB7IGRldGFpbDogeyBmaWxlOiBGaWxlIH0gfTtcbiAgICB0eXBlIFRGaW5pc2ggPSB7IGRldGFpbDogeyBmaWxlOiBGaWxlOyByZXN1bHQ6IHsgW2tleTogc3RyaW5nXTogYW55IH0gfSB9O1xuICAgIHR5cGUgVEZhaWwgPSB7XG4gICAgICAgIGRldGFpbDogeyBmaWxlOiBGaWxlOyByZWFzb25zOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZ1tdIH0gfTtcbiAgICB9O1xuICAgIHR5cGUgVEVycm9yID0geyBkZXRhaWw6IHsgZmlsZTogRmlsZTsgbWVzc2FnZTogc3RyaW5nIH0gfTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIHNwaW5uZXI6IG51bGwsXG4gICAgICAgICAgICBhY3Rpb246IG51bGwsXG4gICAgICAgICAgICBmaWVsZDogbnVsbCxcbiAgICAgICAgfSxcbiAgICAgICAgcXVldWU6IG51bGwsXG5cbiAgICAgICAgaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgICAgIGZvciAobGV0IHBhcmFtIG9mIFtcImZpZWxkXCIsIFwiYWN0aW9uXCJdKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnNbcGFyYW1dKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICBgZmlsZXMtLWltYWdlLXVwbG9hZCBjYW5ub3QgYmUgaW5pdGlhbGl6ZWQgd2l0aG91dCAnJHtwYXJhbX0nIG9wdGlvbmAsXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLmFjdGlvbikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIFwiZmlsZXMtLWltYWdlLXVwbG9hZCBjYW5ub3QgYmUgaW5pdGlhbGl6ZWQgd2l0aG91dCBgYWN0aW9uYCBvcHRpb25cIixcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICQucHJveHlBbGwodGhpcywgL19vbi8pO1xuXG4gICAgICAgICAgICB0aGlzLnF1ZXVlID0gbmV3IFNldCgpO1xuXG4gICAgICAgICAgICB0aGlzLmVsLm9uKFwiY2hhbmdlXCIsIChldmVudDogRXZlbnQpID0+XG4gICAgICAgICAgICAgICAgdGhpcy51cGxvYWQoLi4uKGV2ZW50LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS5maWxlcyEpLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuc3Bpbm5lciA9ICQodGhpcy5vcHRpb25zLnNwaW5uZXIpO1xuICAgICAgICAgICAgdGhpcy5maWVsZCA9ICQodGhpcy5vcHRpb25zLmZpZWxkKTtcbiAgICAgICAgICAgIHRoaXMuc3VibWl0cyA9IHRoaXMuZWxcbiAgICAgICAgICAgICAgICAuY2xvc2VzdChcImZvcm1cIilcbiAgICAgICAgICAgICAgICAuZmluZChcImlucHV0W3R5cGU9c3VibWl0XSxidXR0b25bdHlwZT1zdWJtaXRdXCIpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHVwbG9hZCguLi5maWxlczogRmlsZVtdKSB7XG4gICAgICAgICAgICBmaWxlcy5mb3JFYWNoKGFzeW5jIChmaWxlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdXBsb2FkZXIgPSB0aGlzLnNhbmRib3guZmlsZXMubWFrZVVwbG9hZGVyKFwiU3RhbmRhcmRcIik7XG5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXVlLmFkZChmaWxlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoRm9ybVN0YXRlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9uczogY2thbi5DS0FORVhUX0ZJTEVTLlVwbG9hZE9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGxvYWRlclBhcmFtczogW3sgdXBsb2FkQWN0aW9uOiB0aGlzLm9wdGlvbnMuYWN0aW9uIH1dLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWxzOiB7IHJlc3VsdCB9LFxuICAgICAgICAgICAgICAgICAgICB9ID0gYXdhaXQgdGhpcy5zYW5kYm94LmZpbGVzLnVwbG9hZChmaWxlLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maWVsZC52YWwocmVzdWx0LmlkKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlcnIgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVwb3J0RXJyb3IoXCJFcnJvclwiLCBlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgW2ZpZWxkLCBwcm9ibGVtc10gb2YgT2JqZWN0LmVudHJpZXMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyIGFzIHsgW2tleTogc3RyaW5nXTogc3RyaW5nW10gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGQuc3RhcnRzV2l0aChcIl9fXCIpKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcG9ydEVycm9yKGZpZWxkLCBwcm9ibGVtcy5qb2luKFwiLFwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5xdWV1ZS5kZWxldGUoZmlsZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoRm9ybVN0YXRlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICByZXBvcnRFcnJvcihsYWJlbDogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICAgICAgICAgIGNvbnN0IGJveCA9IHRoaXMuc2FuZGJveC5ub3RpZnkuaW5pdGlhbGl6ZShcbiAgICAgICAgICAgICAgICB0aGlzLnNhbmRib3gubm90aWZ5LmNyZWF0ZShsYWJlbCwgbWVzc2FnZSksXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5maWVsZC5wYXJlbnQoKS5hcHBlbmQoYm94KTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWZyZXNoRm9ybVN0YXRlKCkge1xuICAgICAgICAgICAgdGhpcy5zcGlubmVyLnByb3AoXCJoaWRkZW5cIiwgIXRoaXMucXVldWUuc2l6ZSk7XG4gICAgICAgICAgICB0aGlzLnN1Ym1pdHMucHJvcChcImRpc2FibGVkXCIsICEhdGhpcy5xdWV1ZS5zaXplKTtcbiAgICAgICAgfSxcbiAgICB9O1xufSk7XG5cbi8qKlxuICogQWRkIHNlbGVjdGVkIGZpbGUgdG8gdXBsb2FkIHF1ZXVlIHdoZW5ldmVyIGBbZGF0YS1xdWV1ZS1zY2hlZHVsZXJdYFxuICogZGlzcGF0Y2hlcyBgY2hhbmdlYCBldmVudC5cbiAqXG4gKi9cbmNrYW4ubW9kdWxlKFwiZmlsZXMtLXNjaGVkdWxlclwiLCBmdW5jdGlvbiAoJCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIGltbWVkaWF0ZTogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICAgIGluaXRpYWxpemUoKSB7XG4gICAgICAgICAgICBjb25zdCBzY2hlZHVsZXIgPSB0aGlzLiQoXCJbZGF0YS1xdWV1ZS1zY2hlZHVsZXJdXCIpO1xuICAgICAgICAgICAgc2NoZWR1bGVyLm9uKFwiZHJvcFwiLCAoZXZlbnQ6IEV2ZW50KSA9PiBldmVudC5wcmV2ZW50RGVmYXVsdCgpKTtcbiAgICAgICAgICAgIHNjaGVkdWxlci5vbihcImNoYW5nZVwiLCAoZXZlbnQ6IEV2ZW50KSA9PlxuICAgICAgICAgICAgICAgIHRoaXMucHVzaCguLi4oZXZlbnQudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLmZpbGVzISksXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuXG4gICAgICAgIHB1c2goLi4uZmlsZXM6IEZpbGVbXSkge1xuICAgICAgICAgICAgZmlsZXMuZm9yRWFjaCgoZmlsZSkgPT5cbiAgICAgICAgICAgICAgICB0aGlzLnNhbmRib3gucHVibGlzaChcbiAgICAgICAgICAgICAgICAgICAgY2thbi5DS0FORVhUX0ZJTEVTLnRvcGljcy5hZGRGaWxlVG9RdWV1ZSxcbiAgICAgICAgICAgICAgICAgICAgZmlsZSxcbiAgICAgICAgICAgICAgICAgICAgeyBpbW1lZGlhdGU6IHRoaXMub3B0aW9ucy5pbW1lZGlhdGUgfSxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICB9O1xufSk7XG5cbi8qKlxuICogQWRkIGZpbGUvZGlyZWN0b3JpZXMgdG8gdXBsb2FkIHF1ZXVlIHZpYSBkcmFnJ24nZHJvcC5cbiAqXG4gKi9cbmNrYW4ubW9kdWxlKFwiZmlsZXMtLWRyb3B6b25lXCIsIGZ1bmN0aW9uICgkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgaW1tZWRpYXRlOiBmYWxzZSxcbiAgICAgICAgfSxcblxuICAgICAgICBpbml0aWFsaXplKCkge1xuICAgICAgICAgICAgJC5wcm94eUFsbCh0aGlzLCAvX29uLyk7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5lbFswXTtcblxuICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ292ZXJcIiwgdGhpcy5fb25EcmFnT3Zlcik7XG4gICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnZW50ZXJcIiwgdGhpcy5fb25EcmFnRW50ZXIpO1xuICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ2xlYXZlXCIsIHRoaXMuX29uRHJhZ0xlYXZlKTtcbiAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImRyb3BcIiwgdGhpcy5fb25Ecm9wKTtcbiAgICAgICAgfSxcblxuICAgICAgICBfb25EcmFnT3ZlcihldmVudDogRHJhZ0V2ZW50KSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9LFxuICAgICAgICBfb25EcmFnRW50ZXIoZXZlbnQ6IERyYWdFdmVudCkge30sXG4gICAgICAgIF9vbkRyYWdMZWF2ZShldmVudDogRHJhZ0V2ZW50KSB7fSxcblxuICAgICAgICBfb25Ecm9wKGV2ZW50OiBEcmFnRXZlbnQpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBpZiAoIWV2ZW50LmRhdGFUcmFuc2Zlcikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChsZXQgZW50cnkgb2YgZXZlbnQuZGF0YVRyYW5zZmVyLml0ZW1zKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zY2FuRW50cnkoZW50cnkud2Via2l0R2V0QXNFbnRyeSgpLCAoZmlsZTogRmlsZSkgPT5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wdXNoKGZpbGUpLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2NhbkVudHJ5KFxuICAgICAgICAgICAgZW50cnk6IEZpbGVTeXN0ZW1GaWxlRW50cnkgfCBGaWxlU3lzdGVtRGlyZWN0b3J5RW50cnksXG4gICAgICAgICAgICBjYjogKGZpbGU6IEZpbGUpID0+IHZvaWQsXG4gICAgICAgICkge1xuICAgICAgICAgICAgaWYgKGVudHJ5LmlzRmlsZSkge1xuICAgICAgICAgICAgICAgIChlbnRyeSBhcyBGaWxlU3lzdGVtRmlsZUVudHJ5KS5maWxlKGNiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgKGVudHJ5IGFzIEZpbGVTeXN0ZW1EaXJlY3RvcnlFbnRyeSlcbiAgICAgICAgICAgICAgICAgICAgLmNyZWF0ZVJlYWRlcigpXG4gICAgICAgICAgICAgICAgICAgIC5yZWFkRW50cmllcygoZW50cmllcykgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgIGVudHJpZXMuZm9yRWFjaCgoZSkgPT4gdGhpcy5zY2FuRW50cnkoZSwgY2IpKSxcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBwdXNoKGZpbGU6IEZpbGUpIHtcbiAgICAgICAgICAgIHRoaXMuc2FuZGJveC5wdWJsaXNoKFxuICAgICAgICAgICAgICAgIGNrYW4uQ0tBTkVYVF9GSUxFUy50b3BpY3MuYWRkRmlsZVRvUXVldWUsXG4gICAgICAgICAgICAgICAgZmlsZSxcbiAgICAgICAgICAgICAgICB7IGltbWVkaWF0ZTogdGhpcy5vcHRpb25zLmltbWVkaWF0ZSB9LFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICB9O1xufSk7XG5cbi8qKlxuICogQWRkIHRvIHF1ZXVlIGEgZmlsZSwgdGhhdCBoYXMgYXNzb2NpYXRlZCBpbmNvbXBsZXRlIHVwbG9hZC5cbiAqXG4gKiBTdXBwb3J0cyBhIG51bWJlciBvZiBwcm9wZXJ0aWVzIHRvIHZlcmlmeSB0aGF0IHRoZSBuZXcgZmlsZSBtYXRjaGVzXG4gKiBwcmV2aW91c2x5IHVwbG9hZGVkIGZpbGUuXG4gKlxuICpcbiAqL1xuY2thbi5tb2R1bGUoXCJmaWxlcy0tcmVzdG9yZXJcIiwgZnVuY3Rpb24gKCQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICAgICAgc2l6ZTogMCxcbiAgICAgICAgICAgIHVwbG9hZGVkOiAwLFxuICAgICAgICAgICAgaWQ6IFwiXCIsXG4gICAgICAgICAgICBpbW1lZGlhdGU6IGZhbHNlLFxuICAgICAgICB9LFxuXG4gICAgICAgIGluaXRpYWxpemUoKSB7XG4gICAgICAgICAgICAkLnByb3h5QWxsKHRoaXMsIC9fb24vKTtcbiAgICAgICAgICAgIHRoaXMuZWwub24oXCJjaGFuZ2VcIiwgdGhpcy5fb25DaGFuZ2UpO1xuICAgICAgICB9LFxuXG4gICAgICAgIF9vbkNoYW5nZShldmVudDogRXZlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGUgPSAoZXZlbnQudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLmZpbGVzPy5bMF07XG5cbiAgICAgICAgICAgIGlmICghZmlsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5uYW1lICYmIGZpbGUubmFtZSAhPT0gdGhpcy5vcHRpb25zLm5hbWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNhbmRib3gubm90aWZ5KFxuICAgICAgICAgICAgICAgICAgICBcIk5hbWUgbWlzbWF0Y2guXCIsXG4gICAgICAgICAgICAgICAgICAgIGBFeHBlY3RlZCBuYW1lOiAke3RoaXMub3B0aW9ucy5uYW1lfWAsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNhbmRib3gubm90aWZ5LmVsWzBdLnNjcm9sbEludG9WaWV3KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNpemUgJiYgZmlsZS5zaXplICE9PSB0aGlzLm9wdGlvbnMuc2l6ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2FuZGJveC5ub3RpZnkoXG4gICAgICAgICAgICAgICAgICAgIFwiU2l6ZSBtaXNtYXRjaC5cIixcbiAgICAgICAgICAgICAgICAgICAgYEV4cGVjdGVkIHNpemU6ICR7dGhpcy5vcHRpb25zLnNpemUudG9Mb2NhbGVTdHJpbmcoKX0gYnl0ZXNgLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5zYW5kYm94Lm5vdGlmeS5lbFswXS5zY3JvbGxJbnRvVmlldygpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zYW5kYm94LnB1Ymxpc2goXG4gICAgICAgICAgICAgICAgY2thbi5DS0FORVhUX0ZJTEVTLnRvcGljcy5yZXN0b3JlRmlsZUluUXVldWUsXG4gICAgICAgICAgICAgICAgZmlsZSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiB0aGlzLm9wdGlvbnMuaWQsXG4gICAgICAgICAgICAgICAgICAgIHVwbG9hZGVkOiB0aGlzLm9wdGlvbnMudXBsb2FkZWQsXG4gICAgICAgICAgICAgICAgICAgIGltbWVkaWF0ZTogdGhpcy5vcHRpb25zLmltbWVkaWF0ZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICB9O1xufSk7XG5cbmNrYW4ubW9kdWxlKFwiZmlsZXMtLXNoYXJlZC1xdWV1ZVwiLCBmdW5jdGlvbiAoJCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGluaXRpYWxpemUoKSB7XG4gICAgICAgICAgICAkLnByb3h5QWxsKHRoaXMsIC9fb24vKTtcblxuICAgICAgICAgICAgdGhpcy53b3JrZXIgPSBuZXcgU2hhcmVkV29ya2VyKFxuICAgICAgICAgICAgICAgIHRoaXMuc2FuZGJveC51cmwoXG4gICAgICAgICAgICAgICAgICAgIFwiY2thbmV4dC1maWxlcy9zY3JpcHRzL2ZpbGVzLS1zaGFyZWQtdXBsb2FkZXIuanNcIixcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgdGhpcy53b3JrZXIucG9ydC5vbm1lc3NhZ2UgPSBjb25zb2xlLmRlYnVnO1xuICAgICAgICB9LFxuICAgIH07XG59KTtcblxuY2thbi5tb2R1bGUoXCJmaWxlcy0tcXVldWVcIiwgZnVuY3Rpb24gKCQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICBzdG9yYWdlOiBcImRlZmF1bHRcIixcbiAgICAgICAgICAgIHVwbG9hZGVyOiBcIlN0YW5kYXJkXCIsXG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgICAgICQucHJveHlBbGwodGhpcywgL19vbi8pO1xuICAgICAgICAgICAgY2thbi5wdWJzdWIuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgIGNrYW4uQ0tBTkVYVF9GSUxFUy50b3BpY3MuYWRkRmlsZVRvUXVldWUsXG4gICAgICAgICAgICAgICAgdGhpcy5fb25GaWxlLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNrYW4ucHVic3ViLnN1YnNjcmliZShcbiAgICAgICAgICAgICAgICBja2FuLkNLQU5FWFRfRklMRVMudG9waWNzLnJlc3RvcmVGaWxlSW5RdWV1ZSxcbiAgICAgICAgICAgICAgICB0aGlzLl9vbkZpbGUsXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICB0aGlzLnRwbCA9IHRoaXMuJChcIltkYXRhLXVwbG9hZC10ZW1wbGF0ZV1cIilcbiAgICAgICAgICAgICAgICAucmVtb3ZlKClcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cihcImRhdGEtdXBsb2FkLXRlbXBsYXRlIGhpZGRlblwiKTtcblxuICAgICAgICAgICAgdGhpcy53aWRnZXRzID0gbmV3IFdlYWtNYXAoKTtcbiAgICAgICAgfSxcblxuICAgICAgICB0ZWFyZG93bigpIHtcbiAgICAgICAgICAgIGNrYW4ucHVic3ViLnVuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgIGNrYW4uQ0tBTkVYVF9GSUxFUy50b3BpY3MuYWRkRmlsZVRvUXVldWUsXG4gICAgICAgICAgICAgICAgdGhpcy5fb25GaWxlLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNrYW4ucHVic3ViLnVuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgIGNrYW4uQ0tBTkVYVF9GSUxFUy50b3BpY3MucmVzdG9yZUZpbGVJblF1ZXVlLFxuICAgICAgICAgICAgICAgIHRoaXMuX29uRmlsZSxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgX29uRmlsZShcbiAgICAgICAgICAgIGZpbGU6IEZpbGUsXG4gICAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIGltbWVkaWF0ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgaWQ6IFwiXCIsXG4gICAgICAgICAgICAgICAgdXBsb2FkZWQ6IDAsXG4gICAgICAgICAgICAgICAgdXBsb2FkZXJJbnN0YW5jZTogbnVsbCxcbiAgICAgICAgICAgICAgICB1cGxvYWRlcjogbnVsbCxcbiAgICAgICAgICAgICAgICBzdG9yYWdlOiBudWxsLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBjb25zdCB3aWRnZXQgPSB0aGlzLnRwbC5jbG9uZSh0cnVlKS5hcHBlbmRUbyh0aGlzLmVsKTtcbiAgICAgICAgICAgIGNvbnN0IGluZm8gPSB7XG4gICAgICAgICAgICAgICAgZmlsZSxcbiAgICAgICAgICAgICAgICBpZDogb3B0aW9ucy5pZCxcbiAgICAgICAgICAgICAgICB1cGxvYWRlZDogb3B0aW9ucy51cGxvYWRlZCB8fCAwLFxuICAgICAgICAgICAgICAgIHVwbG9hZGVyOlxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnVwbG9hZGVySW5zdGFuY2UgfHxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zYW5kYm94LmZpbGVzLm1ha2VVcGxvYWRlcihcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMudXBsb2FkZXIgfHwgdGhpcy5vcHRpb25zLnVwbG9hZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBzdG9yYWdlOiBvcHRpb25zLnN0b3JhZ2UgfHwgdGhpcy5vcHRpb25zLnN0b3JhZ2UgfSxcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMud2lkZ2V0cy5zZXQod2lkZ2V0WzBdLCBpbmZvKTtcblxuICAgICAgICAgICAgd2lkZ2V0Lm9uKFwiY2xpY2tcIiwgXCJbZGF0YS11cGxvYWQtcmVzdW1lXVwiLCB0aGlzLl9vbldpZGdldFJlc3VtZSk7XG4gICAgICAgICAgICB3aWRnZXQub24oXCJjbGlja1wiLCBcIltkYXRhLXVwbG9hZC1wYXVzZV1cIiwgdGhpcy5fb25XaWRnZXRQYXVzZSk7XG5cbiAgICAgICAgICAgIGluZm8udXBsb2FkZXIuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICAgICBcImNvbW1pdFwiLFxuICAgICAgICAgICAgICAgIChldmVudDogQ3VzdG9tRXZlbnQpID0+IChpbmZvLmlkID0gZXZlbnQuZGV0YWlsLmlkKSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpbmZvLnVwbG9hZGVyLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAgICAgXCJmYWlsXCIsXG4gICAgICAgICAgICAgICAgKHtcbiAgICAgICAgICAgICAgICAgICAgZGV0YWlsOiB7IHJlYXNvbnMsIGZpbGUgfSxcbiAgICAgICAgICAgICAgICB9OiBDdXN0b21FdmVudDx7XG4gICAgICAgICAgICAgICAgICAgIHJlYXNvbnM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nW10gfTtcbiAgICAgICAgICAgICAgICAgICAgZmlsZTogRmlsZTtcbiAgICAgICAgICAgICAgICB9PikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNhbmRib3gubm90aWZ5KFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMocmVhc29ucylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKChbaywgdl0pID0+IGtbMF0gIT09IFwiX1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKFtrLCB2XSkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkuaXNBcnJheSh2KSA/IHYuam9pbihcIjsgXCIpIDogdixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmpvaW4oXCI7IFwiKSxcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zYW5kYm94Lm5vdGlmeS5lbFswXS5zY3JvbGxJbnRvVmlldygpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlQW5pbWF0aW9uKHdpZGdldCwgZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgIHdpZGdldFxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoXCJbZGF0YS11cGxvYWQtcHJvZ3Jlc3NdXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoXCJiZy1wcmltYXJ5IGJnLXNlY29uZGFyeVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKFwiYmctZGFuZ2VyIHByb2dyZXNzLWJhci1kYW5nZXJcIik7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpbmZvLnVwbG9hZGVyLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAgICAgXCJlcnJvclwiLFxuICAgICAgICAgICAgICAgICh7XG4gICAgICAgICAgICAgICAgICAgIGRldGFpbDogeyBtZXNzYWdlLCBmaWxlIH0sXG4gICAgICAgICAgICAgICAgfTogQ3VzdG9tRXZlbnQ8eyBtZXNzYWdlOiBzdHJpbmc7IGZpbGU6IEZpbGUgfT4pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zYW5kYm94Lm5vdGlmeShmaWxlLm5hbWUsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNhbmRib3gubm90aWZ5LmVsWzBdLnNjcm9sbEludG9WaWV3KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGVBbmltYXRpb24od2lkZ2V0LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHdpZGdldFxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoXCJbZGF0YS11cGxvYWQtcHJvZ3Jlc3NdXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoXCJiZy1wcmltYXJ5IGJnLXNlY29uZGFyeVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKFwiYmctZGFuZ2VyIHByb2dyZXNzLWJhci1kYW5nZXJcIik7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGluZm8udXBsb2FkZXIuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICAgICBcInByb2dyZXNzXCIsXG4gICAgICAgICAgICAgICAgKHsgZGV0YWlsOiB7IGxvYWRlZCwgdG90YWwgfSB9OiBDdXN0b21FdmVudCkgPT5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRXaWRnZXRDb21wbGV0aW9uKHdpZGdldCwgbG9hZGVkLCB0b3RhbCksXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaW5mby51cGxvYWRlci5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgICAgIFwiZmluaXNoXCIsXG4gICAgICAgICAgICAgICAgKHsgZGV0YWlsOiB7IGZpbGUsIHJlc3VsdCB9IH06IEN1c3RvbUV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlQW5pbWF0aW9uKHdpZGdldCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB3aWRnZXRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKFwiW2RhdGEtdXBsb2FkLXByb2dyZXNzXVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKFwiYmctcHJpbWFyeSBiZy1zZWNvbmRhcnlcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhcImJnLXN1Y2Nlc3MgcHJvZ3Jlc3MtYmFyLXN1Y2Nlc3NcIik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2FuZGJveC5wdWJsaXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgY2thbi5DS0FORVhUX0ZJTEVTLnRvcGljcy5xdWV1ZUl0ZW1VcGxvYWRlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHRoaXMuc2V0V2lkZ2V0TmFtZSh3aWRnZXQsIGluZm8uZmlsZS5uYW1lKTtcbiAgICAgICAgICAgIHRoaXMuc2V0V2lkZ2V0Q29tcGxldGlvbih3aWRnZXQsIGluZm8udXBsb2FkZWQsIGluZm8uZmlsZS5zaXplKTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaW1tZWRpYXRlKSB7XG4gICAgICAgICAgICAgICAgd2lkZ2V0LmZpbmQoXCJbZGF0YS11cGxvYWQtcmVzdW1lXVwiKS50cmlnZ2VyKFwiY2xpY2tcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2V0V2lkZ2V0TmFtZSh3aWRnZXQ6IEpRdWVyeSwgbmFtZTogc3RyaW5nKSB7XG4gICAgICAgICAgICB3aWRnZXQuZmluZChcIltkYXRhLWl0ZW0tbmFtZV1cIikudGV4dChuYW1lKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXRXaWRnZXRDb21wbGV0aW9uKHdpZGdldDogSlF1ZXJ5LCB1cGxvYWRlZDogbnVtYmVyLCB0b3RhbDogbnVtYmVyKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9ICh1cGxvYWRlZCAqIDEwMCkgLyB0b3RhbDtcbiAgICAgICAgICAgIGNvbnN0IGluZm8gPSB0aGlzLndpZGdldHMuZ2V0KHdpZGdldFswXSk7XG4gICAgICAgICAgICBpbmZvLnVwbG9hZGVkID0gdXBsb2FkZWQ7XG5cbiAgICAgICAgICAgIGNvbnN0IGNvbXBsZXRpb24gPSB2YWx1ZS50b0ZpeGVkKDApICsgXCIlXCI7XG4gICAgICAgICAgICB3aWRnZXRcbiAgICAgICAgICAgICAgICAuZmluZChcIltkYXRhLXVwbG9hZC1wcm9ncmVzc11cIilcbiAgICAgICAgICAgICAgICAudGV4dChjb21wbGV0aW9uKVxuICAgICAgICAgICAgICAgIC5jc3MoXCJ3aWR0aFwiLCBjb21wbGV0aW9uKTtcbiAgICAgICAgfSxcblxuICAgICAgICB0b2dnbGVBbmltYXRpb24od2lkZ2V0OiBKUXVlcnksIHN0YXRlOiBib29sZWFuKSB7XG4gICAgICAgICAgICB3aWRnZXRcbiAgICAgICAgICAgICAgICAuZmluZChcIltkYXRhLXVwbG9hZC1wcm9ncmVzc11cIilcbiAgICAgICAgICAgICAgICAudG9nZ2xlQ2xhc3MoXCJwcm9ncmVzcy1iYXItYW5pbWF0ZWQgYWN0aXZlXCIsIHN0YXRlKTtcbiAgICAgICAgfSxcblxuICAgICAgICBfb25XaWRnZXRSZXN1bWUoZXZlbnQ6IEpRdWVyeS5UcmlnZ2VyZWRFdmVudCkge1xuICAgICAgICAgICAgY29uc3QgaW5mbyA9IHRoaXMud2lkZ2V0cy5nZXQoZXZlbnQuZGVsZWdhdGVUYXJnZXQpO1xuICAgICAgICAgICAgaWYgKGluZm8udXBsb2FkZWQgPj0gaW5mby50b3RhbCkgcmV0dXJuO1xuXG4gICAgICAgICAgICBjb25zdCB3aWRnZXQgPSAkKGV2ZW50LmRlbGVnYXRlVGFyZ2V0KTtcbiAgICAgICAgICAgIHdpZGdldFxuICAgICAgICAgICAgICAgIC5maW5kKFwiW2RhdGEtdXBsb2FkLXByb2dyZXNzXVwiKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhcImJnLXNlY29uZGFyeVwiKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhcImJnLXByaW1hcnlcIik7XG5cbiAgICAgICAgICAgIGlmIChpbmZvLmlkKSB7XG4gICAgICAgICAgICAgICAgaW5mby51cGxvYWRlci5yZXN1bWUoaW5mby5maWxlLCBpbmZvLmlkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaW5mby51cGxvYWRlci51cGxvYWQoaW5mby5maWxlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy50b2dnbGVBbmltYXRpb24od2lkZ2V0LCB0cnVlKTtcbiAgICAgICAgfSxcblxuICAgICAgICBfb25XaWRnZXRQYXVzZShldmVudDogSlF1ZXJ5LlRyaWdnZXJlZEV2ZW50KSB7XG4gICAgICAgICAgICBjb25zdCBpbmZvID0gdGhpcy53aWRnZXRzLmdldChldmVudC5kZWxlZ2F0ZVRhcmdldCk7XG4gICAgICAgICAgICBpZiAoaW5mby51cGxvYWRlZCA+PSBpbmZvLnRvdGFsKSByZXR1cm47XG5cbiAgICAgICAgICAgIGNvbnN0IHdpZGdldCA9ICQoZXZlbnQuZGVsZWdhdGVUYXJnZXQpO1xuICAgICAgICAgICAgd2lkZ2V0XG4gICAgICAgICAgICAgICAgLmZpbmQoXCJbZGF0YS11cGxvYWQtcHJvZ3Jlc3NdXCIpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKFwiYmctcHJpbWFyeVwiKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhcImJnLXNlY29uZGFyeVwiKTtcblxuICAgICAgICAgICAgaW5mby51cGxvYWRlci5wYXVzZShpbmZvLmZpbGUpO1xuICAgICAgICAgICAgdGhpcy50b2dnbGVBbmltYXRpb24od2lkZ2V0LCBmYWxzZSk7XG4gICAgICAgIH0sXG4gICAgfTtcbn0pO1xuIl19
