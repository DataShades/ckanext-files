"use strict";
ckan.module("files--scheduler", function ($) {
    return {
        initialize() {
            const scheduler = this.$("[data-queue-scheduler]");
            scheduler.on("change", (event) => this.push(...event.target.files));
        },
        push(...files) {
            files.forEach((file) => this.sandbox.publish(ckan.CKANEXT_FILES.topics.addFileToQueue, file));
        },
    };
});
ckan.module("files--restorer", function ($) {
    return {
        options: {
            name: "",
            size: 0,
            uploaded: 0,
            id: "",
        },
        initialize() {
            $.proxyAll(this, /_on/);
            this.el.on("change", this._onChange);
        },
        _onChange(event) {
            const file = event.target.files?.[0];
            if (!file) {
                return;
            }
            if (this.options.name && file.name !== this.options.name) {
                this.sandbox.notify("Name mismatch.", `Expected name: ${this.options.name}`);
                return;
            }
            if (this.options.size && file.size !== this.options.size) {
                this.sandbox.notify("Size mismatch.", `Expected size: ${this.options.size.toLocaleString()} bytes`);
                return;
            }
            this.sandbox.publish(ckan.CKANEXT_FILES.topics.restoreFileInQueue, file, {
                id: this.options.id,
                uploaded: this.options.uploaded,
            });
        },
    };
});
ckan.module("files--queue", function ($) {
    return {
        options: {
            storage: "default",
            uploader: "Standard",
        },
        initialize() {
            $.proxyAll(this, /_on/);
            ckan.pubsub.subscribe(ckan.CKANEXT_FILES.topics.addFileToQueue, this._onFile);
            ckan.pubsub.subscribe(ckan.CKANEXT_FILES.topics.restoreFileInQueue, this._onFile);
            this.tpl = this.$("[data-upload-template]")
                .remove()
                .removeAttr("data-upload-template hidden");
            this.widgets = new WeakMap();
        },
        teardown() {
            ckan.pubsub.unsubscribe(ckan.CKANEXT_FILES.topics.addFileToQueue, this._onFile);
            ckan.pubsub.unsubscribe(ckan.CKANEXT_FILES.topics.restoreFileInQueue, this._onFile);
        },
        _onFile(file, options = { id: "", uploaded: 0, uploader: null, storage: null }) {
            const widget = this.tpl.clone(true).appendTo(this.el);
            const info = {
                file,
                id: options.id,
                uploaded: options.uploaded || 0,
                uploader: this.sandbox.files.makeUploader(options.uploader || this.options.uploader, { storage: options.storage || this.options.storage }),
            };
            this.widgets.set(widget[0], info);
            widget.on("click", "[data-upload-resume]", this._onWidgetResume);
            widget.on("click", "[data-upload-pause]", this._onWidgetPause);
            info.uploader.addEventListener("commit", (event) => (info.id = event.detail.id));
            info.uploader.addEventListener("fail", ({ detail: { reasons, file }, }) => {
                this.sandbox.notify(file.name, Object.entries(reasons)
                    .filter(([k, v]) => k[0] !== "_")
                    .map(([k, v]) => (Array.isArray(v) ? v.join("; ") : v))
                    .join("; "));
                this.toggleAnimation(widget, false);
                widget
                    .find("[data-upload-progress]")
                    .removeClass("bg-primary bg-secondary")
                    .addClass("bg-danger progress-bar-danger");
            });
            info.uploader.addEventListener("error", ({ detail: { message, file }, }) => {
                this.sandbox.notify(file.name, message);
                this.toggleAnimation(widget, false);
                widget
                    .find("[data-upload-progress]")
                    .removeClass("bg-primary bg-secondary")
                    .addClass("bg-danger progress-bar-danger");
            });
            info.uploader.addEventListener("progress", ({ detail: { loaded, total } }) => this.setWidgetCompletion(widget, loaded, total));
            info.uploader.addEventListener("finish", ({ detail: { file, result } }) => {
                this.toggleAnimation(widget, false);
                widget
                    .find("[data-upload-progress]")
                    .removeClass("bg-primary bg-secondary")
                    .addClass("bg-success progress-bar-success");
                this.sandbox.publish(ckan.CKANEXT_FILES.topics.queueItemUploaded, file, result);
            });
            this.setWidgetName(widget, info.file.name);
            this.setWidgetCompletion(widget, info.uploaded, info.file.size);
        },
        setWidgetName(widget, name) {
            widget.find("[data-item-name]").text(name);
        },
        setWidgetCompletion(widget, uploaded, total) {
            const value = (uploaded * 100) / total;
            const info = this.widgets.get(widget[0]);
            info.uploaded = uploaded;
            const completion = value.toFixed(0) + "%";
            widget
                .find("[data-upload-progress]")
                .text(completion)
                .css("width", completion);
        },
        toggleAnimation(widget, state) {
            widget
                .find("[data-upload-progress]")
                .toggleClass("progress-bar-animated active", state);
        },
        _onWidgetResume(event) {
            const info = this.widgets.get(event.delegateTarget);
            if (info.uploaded >= info.total)
                return;
            const widget = $(event.delegateTarget);
            widget
                .find("[data-upload-progress]")
                .removeClass("bg-secondary")
                .addClass("bg-primary");
            if (info.id) {
                info.uploader.resume(info.file, info.id);
            }
            else {
                info.uploader.upload(info.file);
            }
            this.toggleAnimation(widget, true);
        },
        _onWidgetPause(event) {
            const info = this.widgets.get(event.delegateTarget);
            if (info.uploaded >= info.total)
                return;
            const widget = $(event.delegateTarget);
            widget
                .find("[data-upload-progress]")
                .removeClass("bg-primary")
                .addClass("bg-secondary");
            info.uploader.pause(info.file);
            this.toggleAnimation(widget, false);
        },
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMtLXF1ZXVlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vdHMvZmlsZXMtLXF1ZXVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFJLENBQUMsTUFBTSxDQUFDLGtCQUFrQixFQUFFLFVBQVUsQ0FBQztJQUN6QyxPQUFPO1FBQ0wsVUFBVTtZQUNSLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsd0JBQXdCLENBQUMsQ0FBQztZQUNuRCxTQUFTLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQVksRUFBRSxFQUFFLENBQ3RDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBSSxLQUFLLENBQUMsTUFBMkIsQ0FBQyxLQUFNLENBQUMsQ0FDeEQsQ0FBQztRQUNKLENBQUM7UUFFRCxJQUFJLENBQUMsR0FBRyxLQUFhO1lBQ25CLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUNyQixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQ3JFLENBQUM7UUFDSixDQUFDO0tBQ0ssQ0FBQztBQUNYLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRSxVQUFVLENBQUM7SUFDeEMsT0FBTztRQUNMLE9BQU8sRUFBRTtZQUNQLElBQUksRUFBRSxFQUFFO1lBQ1IsSUFBSSxFQUFFLENBQUM7WUFDUCxRQUFRLEVBQUUsQ0FBQztZQUNYLEVBQUUsRUFBRSxFQUFFO1NBQ1A7UUFFRCxVQUFVO1lBQ1IsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDeEIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN2QyxDQUFDO1FBRUQsU0FBUyxDQUFD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LGVBQWUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDckMsQ0FBQztRQUVELGNBQWMsQ0FBQyxLQUE0QjtZQUN6QyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDcEQsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxLQUFLO2dCQUFFLE9BQU87WUFFeEMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUN2QyxNQUFNO2lCQUNILElBQUksQ0FBQyx3QkFBd0IsQ0FBQztpQkFDOUIsV0FBVyxDQUFDLFlBQVksQ0FBQztpQkFDekIsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBRTVCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMvQixJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN0QyxDQUFDO0tBQ0YsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY2thbi5tb2R1bGUoXCJmaWxlcy0tc2NoZWR1bGVyXCIsIGZ1bmN0aW9uICgkKSB7XG4gIHJldHVybiB7XG4gICAgaW5pdGlhbGl6ZSgpIHtcbiAgICAgIGNvbnN0IHNjaGVkdWxlciA9IHRoaXMuJChcIltkYXRhLXF1ZXVlLXNjaGVkdWxlcl1cIik7XG4gICAgICBzY2hlZHVsZXIub24oXCJjaGFuZ2VcIiwgKGV2ZW50OiBFdmVudCkgPT5cbiAgICAgICAgdGhpcy5wdXNoKC4uLihldmVudC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkuZmlsZXMhKSxcbiAgICAgICk7XG4gICAgfSxcblxuICAgIHB1c2goLi4uZmlsZXM6IEZpbGVbXSkge1xuICAgICAgZmlsZXMuZm9yRWFjaCgoZmlsZSkgPT5cbiAgICAgICAgdGhpcy5zYW5kYm94LnB1Ymxpc2goY2thbi5DS0FORVhUX0ZJTEVTLnRvcGljcy5hZGRGaWxlVG9RdWV1ZSwgZmlsZSksXG4gICAgICApO1xuICAgIH0sXG4gIH0gYXMgYW55O1xufSk7XG5cbmNrYW4ubW9kdWxlKFwiZmlsZXMtLXJlc3RvcmVyXCIsIGZ1bmN0aW9uICgkKSB7XG4gIHJldHVybiB7XG4gICAgb3B0aW9uczoge1xuICAgICAgbmFtZTogXCJcIixcbiAgICAgIHNpemU6IDAsXG4gICAgICB1cGxvYWRlZDogMCxcbiAgICAgIGlkOiBcIlwiLFxuICAgIH0sXG5cbiAgICBpbml0aWFsaXplKCkge1xuICAgICAgJC5wcm94eUFsbCh0aGlzLCAvX29uLyk7XG4gICAgICB0aGlzLmVsLm9uKFwiY2hhbmdlXCIsIHRoaXMuX29uQ2hhbmdlKTtcbiAgICB9LFxuXG4gICAgX29uQ2hhbmdlKGV2ZW50OiBFdmVudCkge1xuICAgICAgY29uc3QgZmlsZSA9IChldmVudC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkuZmlsZXM/LlswXTtcblxuICAgICAgaWYgKCFmaWxlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5uYW1lICYmIGZpbGUubmFtZSAhPT0gdGhpcy5vcHRpb25zLm5hbWUpIHtcbiAgICAgICAgdGhpcy5zYW5kYm94Lm5vdGlmeShcbiAgICAgICAgICBcIk5hbWUgbWlzbWF0Y2guXCIsXG4gICAgICAgICAgYEV4cGVjdGVkIG5hbWU6ICR7dGhpcy5vcHRpb25zLm5hbWV9YCxcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnNpemUgJiYgZmlsZS5zaXplICE9PSB0aGlzLm9wdGlvbnMuc2l6ZSkge1xuICAgICAgICB0aGlzLnNhbmRib3gubm90aWZ5KFxuICAgICAgICAgIFwiU2l6ZSBtaXNtYXRjaC5cIixcbiAgICAgICAgICBgRXhwZWN0ZWQgc2l6ZTogJHt0aGlzLm9wdGlvbnMuc2l6ZS50b0xvY2FsZVN0cmluZygpfSBieXRlc2AsXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zYW5kYm94LnB1Ymxpc2goY2thbi5DS0FORVhUX0ZJTEVTLnRvcGljcy5yZXN0b3JlRmlsZUluUXVldWUsIGZpbGUsIHtcbiAgICAgICAgaWQ6IHRoaXMub3B0aW9ucy5pZCxcbiAgICAgICAgdXBsb2FkZWQ6IHRoaXMub3B0aW9ucy51cGxvYWRlZCxcbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59KTtcbmNrYW4ubW9kdWxlKFwiZmlsZXMtLXF1ZXVlXCIsIGZ1bmN0aW9uICgkKSB7XG4gIHJldHVybiB7XG4gICAgb3B0aW9uczoge1xuICAgICAgc3RvcmFnZTogXCJkZWZhdWx0XCIsXG4gICAgICB1cGxvYWRlcjogXCJTdGFuZGFyZFwiLFxuICAgIH0sXG5cbiAgICBpbml0aWFsaXplKCkge1xuICAgICAgJC5wcm94eUFsbCh0aGlzLCAvX29uLyk7XG4gICAgICBja2FuLnB1YnN1Yi5zdWJzY3JpYmUoXG4gICAgICAgIGNrYW4uQ0tBTkVYVF9GSUxFUy50b3BpY3MuYWRkRmlsZVRvUXVldWUsXG4gICAgICAgIHRoaXMuX29uRmlsZSxcbiAgICAgICk7XG4gICAgICBja2FuLnB1YnN1Yi5zdWJzY3JpYmUoXG4gICAgICAgIGNrYW4uQ0tBTkVYVF9GSUxFUy50b3BpY3MucmVzdG9yZUZpbGVJblF1ZXVlLFxuICAgICAgICB0aGlzLl9vbkZpbGUsXG4gICAgICApO1xuXG4gICAgICB0aGlzLnRwbCA9IHRoaXMuJChcIltkYXRhLXVwbG9hZC10ZW1wbGF0ZV1cIilcbiAgICAgICAgLnJlbW92ZSgpXG4gICAgICAgIC5yZW1vdmVBdHRyKFwiZGF0YS11cGxvYWQtdGVtcGxhdGUgaGlkZGVuXCIpO1xuXG4gICAgICB0aGlzLndpZGdldHMgPSBuZXcgV2Vha01hcCgpO1xuICAgIH0sXG5cbiAgICB0ZWFyZG93bigpIHtcbiAgICAgIGNrYW4ucHVic3ViLnVuc3Vic2NyaWJlKFxuICAgICAgICBja2FuLkNLQU5FWFRfRklMRVMudG9waWNzLmFkZEZpbGVUb1F1ZXVlLFxuICAgICAgICB0aGlzLl9vbkZpbGUsXG4gICAgICApO1xuICAgICAgY2thbi5wdWJzdWIudW5zdWJzY3JpYmUoXG4gICAgICAgIGNrYW4uQ0tBTkVYVF9GSUxFUy50b3BpY3MucmVzdG9yZUZpbGVJblF1ZXVlLFxuICAgICAgICB0aGlzLl9vbkZpbGUsXG4gICAgICApO1xuICAgIH0sXG5cbiAgICBfb25GaWxlKFxuICAgICAgZmlsZTogRmlsZSxcbiAgICAgIG9wdGlvbnMgPSB7IGlkOiBcIlwiLCB1cGxvYWRlZDogMCwgdXBsb2FkZXI6IG51bGwsIHN0b3JhZ2U6IG51bGwgfSxcbiAgICApIHtcbiAgICAgIGNvbnN0IHdpZGdldCA9IHRoaXMudHBsLmNsb25lKHRydWUpLmFwcGVuZFRvKHRoaXMuZWwpO1xuICAgICAgY29uc3QgaW5mbyA9IHtcbiAgICAgICAgZmlsZSxcbiAgICAgICAgaWQ6IG9wdGlvbnMuaWQsXG4gICAgICAgIHVwbG9hZGVkOiBvcHRpb25zLnVwbG9hZGVkIHx8IDAsXG4gICAgICAgIHVwbG9hZGVyOiB0aGlzLnNhbmRib3guZmlsZXMubWFrZVVwbG9hZGVyKFxuICAgICAgICAgIG9wdGlvbnMudXBsb2FkZXIgfHwgdGhpcy5vcHRpb25zLnVwbG9hZGVyLFxuICAgICAgICAgIHsgc3RvcmFnZTogb3B0aW9ucy5zdG9yYWdlIHx8IHRoaXMub3B0aW9ucy5zdG9yYWdlIH0sXG4gICAgICAgICksXG4gICAgICB9O1xuXG4gICAgICB0aGlzLndpZGdldHMuc2V0KHdpZGdldFswXSwgaW5mbyk7XG5cbiAgICAgIHdpZGdldC5vbihcImNsaWNrXCIsIFwiW2RhdGEtdXBsb2FkLXJlc3VtZV1cIiwgdGhpcy5fb25XaWRnZXRSZXN1bWUpO1xuICAgICAgd2lkZ2V0Lm9uKFwiY2xpY2tcIiwgXCJbZGF0YS11cGxvYWQtcGF1c2VdXCIsIHRoaXMuX29uV2lkZ2V0UGF1c2UpO1xuXG4gICAgICBpbmZvLnVwbG9hZGVyLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgIFwiY29tbWl0XCIsXG4gICAgICAgIChldmVudDogQ3VzdG9tRXZlbnQpID0+IChpbmZvLmlkID0gZXZlbnQuZGV0YWlsLmlkKSxcbiAgICAgICk7XG4gICAgICBpbmZvLnVwbG9hZGVyLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgIFwiZmFpbFwiLFxuICAgICAgICAoe1xuICAgICAgICAgIGRldGFpbDogeyByZWFzb25zLCBmaWxlIH0sXG4gICAgICAgIH06IEN1c3RvbUV2ZW50PHtcbiAgICAgICAgICByZWFzb25zOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZ1tdIH07XG4gICAgICAgICAgZmlsZTogRmlsZTtcbiAgICAgICAgfT4pID0+IHtcbiAgICAgICAgICB0aGlzLnNhbmRib3gubm90aWZ5KFxuICAgICAgICAgICAgZmlsZS5uYW1lLFxuICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMocmVhc29ucylcbiAgICAgICAgICAgICAgLmZpbHRlcigoW2ssIHZdKSA9PiBrWzBdICE9PSBcIl9cIilcbiAgICAgICAgICAgICAgLm1hcCgoW2ssIHZdKSA9PiAoQXJyYXkuaXNBcnJheSh2KSA/IHYuam9pbihcIjsgXCIpIDogdikpXG4gICAgICAgICAgICAgIC5qb2luKFwiOyBcIiksXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGlzLnRvZ2dsZUFuaW1hdGlvbih3aWRnZXQsIGZhbHNlKTtcblxuICAgICAgICAgIHdpZGdldFxuICAgICAgICAgICAgLmZpbmQoXCJbZGF0YS11cGxvYWQtcHJvZ3Jlc3NdXCIpXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoXCJiZy1wcmltYXJ5IGJnLXNlY29uZGFyeVwiKVxuICAgICAgICAgICAgLmFkZENsYXNzKFwiYmctZGFuZ2VyIHByb2dyZXNzLWJhci1kYW5nZXJcIik7XG4gICAgICAgIH0sXG4gICAgICApO1xuICAgICAgaW5mby51cGxvYWRlci5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICBcImVycm9yXCIsXG4gICAgICAgICh7XG4gICAgICAgICAgZGV0YWlsOiB7IG1lc3NhZ2UsIGZpbGUgfSxcbiAgICAgICAgfTogQ3VzdG9tRXZlbnQ8eyBtZXNzYWdlOiBzdHJpbmc7IGZpbGU6IEZpbGUgfT4pID0+IHtcbiAgICAgICAgICB0aGlzLnNhbmRib3gubm90aWZ5KGZpbGUubmFtZSwgbWVzc2FnZSk7XG4gICAgICAgICAgdGhpcy50b2dnbGVBbmltYXRpb24od2lkZ2V0LCBmYWxzZSk7XG4gICAgICAgICAgd2lkZ2V0XG4gICAgICAgICAgICAuZmluZChcIltkYXRhLXVwbG9hZC1wcm9ncmVzc11cIilcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhcImJnLXByaW1hcnkgYmctc2Vjb25kYXJ5XCIpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoXCJiZy1kYW5nZXIgcHJvZ3Jlc3MtYmFyLWRhbmdlclwiKTtcbiAgICAgICAgfSxcbiAgICAgICk7XG5cbiAgICAgIGluZm8udXBsb2FkZXIuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgXCJwcm9ncmVzc1wiLFxuICAgICAgICAoeyBkZXRhaWw6IHsgbG9hZGVkLCB0b3RhbCB9IH06IEN1c3RvbUV2ZW50KSA9PlxuICAgICAgICAgIHRoaXMuc2V0V2lkZ2V0Q29tcGxldGlvbih3aWRnZXQsIGxvYWRlZCwgdG90YWwpLFxuICAgICAgKTtcbiAgICAgIGluZm8udXBsb2FkZXIuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgXCJmaW5pc2hcIixcbiAgICAgICAgKHsgZGV0YWlsOiB7IGZpbGUsIHJlc3VsdCB9IH06IEN1c3RvbUV2ZW50KSA9PiB7XG4gICAgICAgICAgdGhpcy50b2dnbGVBbmltYXRpb24od2lkZ2V0LCBmYWxzZSk7XG4gICAgICAgICAgd2lkZ2V0XG4gICAgICAgICAgICAuZmluZChcIltkYXRhLXVwbG9hZC1wcm9ncmVzc11cIilcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhcImJnLXByaW1hcnkgYmctc2Vjb25kYXJ5XCIpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoXCJiZy1zdWNjZXNzIHByb2dyZXNzLWJhci1zdWNjZXNzXCIpO1xuICAgICAgICAgIHRoaXMuc2FuZGJveC5wdWJsaXNoKFxuICAgICAgICAgICAgY2thbi5DS0FORVhUX0ZJTEVTLnRvcGljcy5xdWV1ZUl0ZW1VcGxvYWRlZCxcbiAgICAgICAgICAgIGZpbGUsXG4gICAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICk7XG5cbiAgICAgIHRoaXMuc2V0V2lkZ2V0TmFtZSh3aWRnZXQsIGluZm8uZmlsZS5uYW1lKTtcbiAgICAgIHRoaXMuc2V0V2lkZ2V0Q29tcGxldGlvbih3aWRnZXQsIGluZm8udXBsb2FkZWQsIGluZm8uZmlsZS5zaXplKTtcbiAgICB9LFxuXG4gICAgc2V0V2lkZ2V0TmFtZSh3aWRnZXQ6IEpRdWVyeSwgbmFtZTogc3RyaW5nKSB7XG4gICAgICB3aWRnZXQuZmluZChcIltkYXRhLWl0ZW0tbmFtZV1cIikudGV4dChuYW1lKTtcbiAgICB9LFxuXG4gICAgc2V0V2lkZ2V0Q29tcGxldGlvbih3aWRnZXQ6IEpRdWVyeSwgdXBsb2FkZWQ6IG51bWJlciwgdG90YWw6IG51bWJlcikge1xuICAgICAgY29uc3QgdmFsdWUgPSAodXBsb2FkZWQgKiAxMDApIC8gdG90YWw7XG4gICAgICBjb25zdCBpbmZvID0gdGhpcy53aWRnZXRzLmdldCh3aWRnZXRbMF0pO1xuICAgICAgaW5mby51cGxvYWRlZCA9IHVwbG9hZGVkO1xuXG4gICAgICBjb25zdCBjb21wbGV0aW9uID0gdmFsdWUudG9GaXhlZCgwKSArIFwiJVwiO1xuICAgICAgd2lkZ2V0XG4gICAgICAgIC5maW5kKFwiW2RhdGEtdXBsb2FkLXByb2dyZXNzXVwiKVxuICAgICAgICAudGV4dChjb21wbGV0aW9uKVxuICAgICAgICAuY3NzKFwid2lkdGhcIiwgY29tcGxldGlvbik7XG4gICAgfSxcblxuICAgIHRvZ2dsZUFuaW1hdGlvbih3aWRnZXQ6IEpRdWVyeSwgc3RhdGU6IGJvb2xlYW4pIHtcbiAgICAgIHdpZGdldFxuICAgICAgICAuZmluZChcIltkYXRhLXVwbG9hZC1wcm9ncmVzc11cIilcbiAgICAgICAgLnRvZ2dsZUNsYXNzKFwicHJvZ3Jlc3MtYmFyLWFuaW1hdGVkIGFjdGl2ZVwiLCBzdGF0ZSk7XG4gICAgfSxcblxuICAgIF9vbldpZGdldFJlc3VtZShldmVudDogSlF1ZXJ5LlRyaWdnZXJlZEV2ZW50KSB7XG4gICAgICBjb25zdCBpbmZvID0gdGhpcy53aWRnZXRzLmdldChldmVudC5kZWxlZ2F0ZVRhcmdldCk7XG4gICAgICBpZiAoaW5mby51cGxvYWRlZCA+PSBpbmZvLnRvdGFsKSByZXR1cm47XG5cbiAgICAgIGNvbnN0IHdpZGdldCA9ICQoZXZlbnQuZGVsZWdhdGVUYXJnZXQpO1xuICAgICAgd2lkZ2V0XG4gICAgICAgIC5maW5kKFwiW2RhdGEtdXBsb2FkLXByb2dyZXNzXVwiKVxuICAgICAgICAucmVtb3ZlQ2xhc3MoXCJiZy1zZWNvbmRhcnlcIilcbiAgICAgICAgLmFkZENsYXNzKFwiYmctcHJpbWFyeVwiKTtcblxuICAgICAgaWYgKGluZm8uaWQpIHtcbiAgICAgICAgaW5mby51cGxvYWRlci5yZXN1bWUoaW5mby5maWxlLCBpbmZvLmlkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluZm8udXBsb2FkZXIudXBsb2FkKGluZm8uZmlsZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudG9nZ2xlQW5pbWF0aW9uKHdpZGdldCwgdHJ1ZSk7XG4gICAgfSxcblxuICAgIF9vbldpZGdldFBhdXNlKGV2ZW50OiBKUXVlcnkuVHJpZ2dlcmVkRXZlbnQpIHtcbiAgICAgIGNvbnN0IGluZm8gPSB0aGlzLndpZGdldHMuZ2V0KGV2ZW50LmRlbGVnYXRlVGFyZ2V0KTtcbiAgICAgIGlmIChpbmZvLnVwbG9hZGVkID49IGluZm8udG90YWwpIHJldHVybjtcblxuICAgICAgY29uc3Qgd2lkZ2V0ID0gJChldmVudC5kZWxlZ2F0ZVRhcmdldCk7XG4gICAgICB3aWRnZXRcbiAgICAgICAgLmZpbmQoXCJbZGF0YS11cGxvYWQtcHJvZ3Jlc3NdXCIpXG4gICAgICAgIC5yZW1vdmVDbGFzcyhcImJnLXByaW1hcnlcIilcbiAgICAgICAgLmFkZENsYXNzKFwiYmctc2Vjb25kYXJ5XCIpO1xuXG4gICAgICBpbmZvLnVwbG9hZGVyLnBhdXNlKGluZm8uZmlsZSk7XG4gICAgICB0aGlzLnRvZ2dsZUFuaW1hdGlvbih3aWRnZXQsIGZhbHNlKTtcbiAgICB9LFxuICB9O1xufSk7XG4iXX0=