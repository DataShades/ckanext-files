version: 1
groups:
  - annotation: ckanext-files
    options:
      - key: ckanext.files.default_storage
        default: default
        description: |
          Default storage used for upload when no explicit storage specified

      - key: ckanext.files.inline_content_types
        default: application/pdf image video
        type: list
        description: |
            MIMEtypes that can be served without content-disposition:attachment
            header.

      - key: ckanext.files.user_images_storage
        default: user_images
        description: |
          Storage used for user image uploads. When empty, user image uploads
          are not allowed.

      - key: ckanext.files.group_images_storage
        default: group_images
        description: |
          Storage used for group image uploads. When empty, group image uploads
          are not allowed.

      - key: ckanext.files.resources_storage
        default: resources
        description: |
          Storage used for resource uploads. When empty, resource uploads are
          not allowed.

      - key: ckanext.files.enable_resource_migration_template_patch
        type: bool
        description: |
            Enable HTML templates and JS modules required for unsafe default
            implementation of resource uploads via files. IMPORTANT: this
            option exists to simplify migration and experiments with the
            extension. These templates may change a lot or even get removed in
            the public release of the extension.

      - key: ckanext.files.authenticated_uploads.allow
        type: bool
        description: |
            Any authenticated user can upload files.

      - key: ckanext.files.authenticated_uploads.storages
        type: list
        default: [default]
        description: |
            Names of storages that can by used by non-sysadmin users when
            authenticated uploads enabled

      - key: ckanext.files.owner.cascade_access
        type: list
        default:
            - package
            - resource
            - group
            - organization
        description: |
          List of owner types that grant access on owned file to anyone who has
          access to the owner of file. For example, if this option has value
          `resource package`, anyone who passes `resource_show` auth, can see
          all files owned by resource; anyone who passes `package_show`, can
          see all files owned by package; anyone who passes
          `package_update`/`resource_update` can modify files owned by
          package/resource; anyone who passes
          `package_delete`/`resource_delete` can delete files owned by
          package/resoure.
          IMPORTANT: Do not add `user` to this list. Files may be temporarily
          owned by user during resource creation. Using cascade access rules
          with `user` exposes such temporal files to anyone who can read user's
          profile.

      - key: ckanext.files.owner.transfer_as_update
        type: bool
        default: true
        description: |
            Use `*_update` auth function to check cascade access for ownership
            transfer. Works with `ckanext.files.owner.cascade_access`, which by
            itself will check `*_file_transfer` auth function, but switch to
            `*_update` when this flag is enabled.

      - key: ckanext.files.storage.<NAME>.<OPTION>
        type: dynamic
        description: |
          Configuration of the named storage.
